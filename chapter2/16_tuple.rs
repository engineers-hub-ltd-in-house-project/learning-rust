/*
 * タプルの使用方法
 *
 * この例では、Rustのタプル（tuple）の基本的な使い方を示しています。
 * タプルは異なる型の複数の値をグループ化するためのデータ構造です。
 *
 * タプルの特徴：
 * 1. 丸括弧 () を使って作成する
 * 2. 異なる型の値を一つの変数に格納できる
 * 3. インデックスを使って各要素にアクセスできる（0から始まる）
 * 4. パターンマッチングによる分解（デストラクチャリング）が可能
 *
 * この例では、タプルの作成、インデックスによるアクセス、
 * そして分解による値の取り出し方を示しています。
 */

fn main() {
    // 異なる型の値を含むタプルを作成（型注釈を明示）
    let person: (&str, i32, f64) = ("山田太郎", 30, 175.5);

    // インデックスによるアクセス
    println!("名前: {}", person.0);
    println!("年齢: {}歳", person.1);
    println!("身長: {}cm", person.2);

    // タプルの分解（デストラクチャリング）
    let (name, age, height): (&str, i32, f64) = person;
    println!(
        "分解後 - 名前: {}, 年齢: {}歳, 身長: {}cm",
        name, age, height
    );
}
