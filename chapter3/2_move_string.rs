/*
 * Stringの所有権移動
 *
 * この例では、Rustの所有権システムの基本的な概念である「ムーブ（move）」について示しています。
 * String型のような「ヒープに格納されるデータ型」は、変数間で代入を行うと所有権が移動します。
 * 
 * 所有権移動の特徴：
 * 1. 元の変数は無効になり、新しい変数が値の所有者になる
 * 2. 元の変数を使おうとするとコンパイルエラーになる
 * 3. これによりデータ競合やダングリングポインタを防ぐ
 * 
 * この例では、String型の変数s1をs2に代入すると所有権が移動し、
 * その後s1を使おうとするとコンパイルエラーが発生します。
 */

fn main() {
    let s1 = String::from("hello");
    let s2 = s1; // s1の所有権がs2に移動
    
    // 以下の行はコンパイルエラーになる
    // println!("s1: {}", s1); // エラー: 所有権が移動した変数を使用
    
    println!("s2: {}", s2); // OK: s2が所有権を持っている
}
