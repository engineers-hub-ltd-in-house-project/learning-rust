/*
 * 数値型のコピー
 *
 * この例では、数値型のような「スタックに格納されるデータ型」の振る舞いを示しています。
 * これらの型はCopyトレイトを実装しており、変数間で代入を行うと自動的にコピーされます。
 *
 * Copyトレイトを実装している型の特徴：
 * 1. 変数を別の変数に代入すると、値がコピーされる
 * 2. 元の変数は引き続き使用できる（所有権が移動しない）
 * 3. メモリ上で単純にコピーできる（ディープコピーが不要）
 *
 * Copyトレイトを実装している型には以下のようなものがあります：
 * - 整数型（i32, u64など）
 * - 浮動小数点型（f32, f64）
 * - 真偽値型（bool）
 * - 文字型（char）
 * - タプル（ただし、すべての要素がCopyトレイトを実装している場合のみ）
 */

fn main() {
    // 型注釈を明示的に指定
    let x: i32 = 42; // i32型
    let y: i32 = x; // xの値がyにコピーされる

    // 両方の変数が使用可能
    println!("x = {}, y = {}", x, y);

    // 数値を使った計算
    let result: i32 = x + y;
    println!("x + y = {}", result);

    // 関数に渡しても元の変数は使用可能
    let z: i32 = calculate(x);
    println!("元のx: {}, 計算結果: {}", x, z);

    // 他のCopyトレイト実装型の例
    let b1: bool = true;
    let b2: bool = b1; // コピー

    let c1: char = '漢';
    let c2: char = c1; // コピー

    let f1: f64 = 3.14159;
    let f2: f64 = f1; // コピー

    // 全ての要素がCopyトレイトを実装しているタプル
    let tuple: (i32, bool, char) = (123, true, 'A');
    let tuple_copy: (i32, bool, char) = tuple; // コピー

    println!(
        "全てコピー後も使用可能: {}, {}, {}, {}, {:?}",
        b1, c1, f1, tuple.0, tuple_copy
    );
}

// 関数も戻り値の型注釈を明示
fn calculate(num: i32) -> i32 {
    num * 2
}
