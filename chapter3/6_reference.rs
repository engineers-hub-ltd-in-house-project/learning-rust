/*
 * 参照の使用
 *
 * この例では、Rustの参照（リファレンス）の基本的な使い方を示しています。
 * 参照を使うと、所有権を移動せずに値を関数に渡したり、変数から値を借用できます。
 *
 * 参照の特徴：
 * 1. &演算子を使って参照を作成する
 * 2. 所有権は移動せず、値を「借用」する
 * 3. デフォルトでは不変（イミュータブル）
 * 4. 参照が指す値を変更することはできない（イミュータブル参照の場合）
 *
 * この例では、String型の変数の参照を関数に渡し、元の変数の所有権を保持したまま
 * その内容を使用しています。
 */

fn main() {
    let s1 = String::from("hello");

    // s1の参照を関数に渡す
    let len = calculate_length(&s1);

    // s1の所有権は移動していないので、ここでもs1を使える
    println!("文字列「{}」の長さは{}", s1, len);
}

// 参照を引数に取る関数
fn calculate_length(s: &String) -> usize {
    s.len()
}
